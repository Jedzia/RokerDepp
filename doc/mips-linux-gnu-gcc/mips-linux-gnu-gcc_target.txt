The following options are target specific:
  -G<number>                  Put global and static data smaller than <number>
                              bytes into a special section (on some targets)
  -mabi=ABI                   Generate code that conforms to the given ABI
  -mabicalls                  Generate code that can be used in SVR4-style
                              dynamic objects
  -mabs=MODE                  Select the IEEE 754 ABS/NEG instruction execution
                              mode
  -mandroid                   Generate code for the Android platform.
  -march=ISA                  Generate code for the given ISA
  -mbionic                    Use Bionic C library
  -mbranch-cost=COST          Set the cost of branches to roughly COST
                              instructions
  -mbranch-likely             Use Branch Likely instructions, overriding the
                              architecture default
  -mcheck-zero-division       Trap on integer divide by zero
  -mcode-readable=SETTING     Specify when instructions are allowed to access
                              code
  -mcompact-eh                Use compact exception unwinding tables.
  -mdebug                     This switch lacks documentation
  -mdebugd                    This switch lacks documentation
  -mdivide-breaks             Use branch-and-break sequences to check for
                              integer divide by zero
  -mdivide-traps              Use trap instructions to check for integer divide
                              by zero
  -mdmx                       Allow the use of MDMX instructions
  -mdouble-float              Allow hardware floating-point instructions to
                              cover both 32-bit and 64-bit operations
  -mdsp                       Use MIPS-DSP instructions
  -mdspr2                     Use MIPS-DSP REV 2 instructions
  -meb                        Use big-endian byte order
  -mel                        Use little-endian byte order
  -membedded-data             Use ROM instead of RAM
  -meva                       Use Enhanced Virtual Addressing instructions
  -mexplicit-relocs           Use NewABI-style %reloc() assembly operators
  -mextern-sdata              Use -G for data that is not defined by the
                              current object
  -mfix-24k                   Work around certain 24K errata
  -mfix-r10000                Work around certain R10000 errata
  -mfix-r4000                 Work around certain R4000 errata
  -mfix-r4400                 Work around certain R4400 errata
  -mfix-rm7000                Work around certain RM7000 errata
  -mfix-sb1                   Work around errata for early SB-1 revision 2 cores
  -mfix-vr4120                Work around certain VR4120 errata
  -mfix-vr4130                Work around VR4130 mflo/mfhi errata
  -mfix4300                   Work around an early 4300 hardware bug
  -mflip-mips16               Switch on/off MIPS16 ASE on alternating functions
                              for compiler testing
  -mflush-func=FUNC           Use FUNC to flush the cache before calling stack
                              trampolines
  -mfp-exceptions             FP exceptions are enabled
  -mfp32                      Use 32-bit floating-point registers
  -mfp64                      Use 64-bit floating-point registers
  -mfpxx                      Conform to the o32 FPXX ABI
  -mframe-header-opt          Optimize frame header
  -mfused-madd                Generate floating-point multiply-add instructions
  -mglibc                     Use GNU C library
  -mgp32                      Use 32-bit general registers
  -mgp64                      Use 64-bit general registers
  -mgpopt                     Use GP-relative addressing to access small data
  -mhard-float                Allow the use of hardware floating-point ABI and
                              instructions
  -mimadd                     Use integer madd/msub instructions
  -minterlink-compressed      Generate code that is link-compatible with MIPS16
                              and microMIPS code.
  -minterlink-mips16          An alias for minterlink-compressed provided for
                              backward-compatibility.
  -mipsN                      Generate code for ISA level N
  -mips16                     Generate MIPS16 code
  -mips16e                    Deprecated; alias for -mips16
  -mips3d                     Use MIPS-3D instructions
  -mllsc                      Use ll, sc and sync instructions
  -mlocal-sdata               Use -G for object-local data
  -mlong-calls                Use indirect calls
  -mlong32                    Use a 32-bit long type
  -mlong64                    Use a 64-bit long type
  -mlra                       Use LRA instead of reload
  -mmad                       Use PMC-style 'mad' instructions
  -mmcount-ra-address         Pass the address of the ra save location to
                              _mcount in $12
  -mmcu                       Use MCU instructions
  -mmemcpy                    Don't optimize block moves
  -mmicromips                 Use microMIPS instructions
  -mmt                        Allow the use of MT instructions
  -mnan=ENCODING              Select the IEEE 754 NaN data encoding
  -mno-flush-func             Do not use a cache-flushing function before
                              calling stack trampolines
  -mno-mdmx                   Do not use MDMX instructions
  -mno-mips16                 Generate normal-mode code
  -mno-mips3d                 Do not use MIPS-3D instructions
  -modd-spreg                 Enable use of odd-numbered single-precision
                              registers
  -mpaired-single             Use paired-single floating-point instructions
  -mplt                       When generating -mabicalls code, allow
                              executables to use PLTs and copy relocations
  -mr10k-cache-barrier=SETTING Specify when r10k cache barriers should be
                              inserted
  -mrelax-pic-calls           Try to allow the linker to turn PIC calls into
                              direct calls
  -mshared                    When generating -mabicalls code, make the code
                              suitable for use in shared libraries
  -msingle-float              Restrict the use of hardware floating-point
                              instructions to 32-bit operations
  -msmartmips                 Use SmartMIPS instructions
  -msoft-float                Prevent the use of all hardware floating-point
                              instructions
  -msplit-addresses           Optimize lui/addiu address loads
  -msym32                     Assume all symbols have 32-bit values
  -msynci                     Use synci instruction to invalidate i-cache
  -mtune=PROCESSOR            Optimize the output for PROCESSOR
  -muclibc                    Use uClibc C library
  -muninit-const-in-rodata    Put uninitialized constants in ROM (needs
                              -membedded-data)
  -mvirt                      Use Virtualization Application Specific
                              instructions
  -mvr4130-align              Perform VR4130-specific alignment optimizations
  -mxgot                      Lift restrictions on GOT size
  -mxpa                       Use eXtended Physical Address (XPA) instructions

  Known MIPS ABIs (for use with the -mabi= option):
    32 64 eabi n32 o64

  Known MIPS CPUs (for use with the -march= and -mtune= options):
    10000 1004kc 1004kf 1004kf1_1 1004kf2_1 10k 12000 12k 14000 14k 16000 16k
    2000 20kc 24kc 24kec 24kef 24kef1_1 24kef2_1 24kefx 24kex 24kf 24kf1_1
    24kf2_1 24kfx 24kx 2k 3000 34kc 34kf 34kf1_1 34kf2_1 34kfx 34kn 34kx 3900 3k
    4000 4100 4111 4120 4130 4300 4400 4600 4650 4700 4k 4kc 4kec 4kem 4kep 4km
    4kp 4ksc 4ksd 5000 5400 5500 5900 5k 5kc 5kf 6000 6k 7000 74kc 74kf 74kf1_1
    74kf2_1 74kf3_2 74kfx 74kx 7k 8000 8k 9000 9k from-abi loongson2e loongson2f
    loongson3a m14k m14kc m14ke m14kec m4k mips1 mips2 mips3 mips32 mips32r2
    mips32r3 mips32r5 mips32r6 mips4 mips64 mips64r2 mips64r3 mips64r5 mips64r6
    native octeon octeon+ octeon2 octeon3 orion p5600 r10000 r1004kc r1004kf
    r1004kf1_1 r1004kf2_1 r10k r12000 r12k r14000 r14k r16000 r16k r2000 r20kc
    r24kc r24kec r24kef r24kef1_1 r24kef2_1 r24kefx r24kex r24kf r24kf1_1
    r24kf2_1 r24kfx r24kx r2k r3000 r34kc r34kf r34kf1_1 r34kf2_1 r34kfx r34kn
    r34kx r3900 r3k r4000 r4100 r4111 r4120 r4130 r4300 r4400 r4600 r4650 r4700
    r4k r4kc r4kec r4kem r4kep r4km r4kp r4ksc r4ksd r5000 r5400 r5500 r5900 r5k
    r5kc r5kf r6000 r6k r7000 r74kc r74kf r74kf1_1 r74kf2_1 r74kf3_2 r74kfx
    r74kx r7k r8000 r8k r9000 r9k rm7000 rm7k rm9000 rm9k sb1 sb1a sr71000 sr71k
    vr4100 vr4111 vr4120 vr4130 vr4300 vr5000 vr5400 vr5500 vr5k xlp xlr

  Valid arguments to -mcode-readable=:
    no pcrel yes

  Known MIPS IEEE 754 settings (for use with the -mabs= and -mnan= options):
    2008 legacy

  Known MIPS ISA levels (for use with the -mips option):
    1 2 3 32 32r2 32r3 32r5 32r6 4 64 64r2 64r3 64r5 64r6

  Valid arguments to -mr10k-cache-barrier=:
    load-store none store

